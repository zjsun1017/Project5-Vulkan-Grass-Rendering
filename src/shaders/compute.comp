#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define GRAVITY 9.8
#define GRAVITYSTRENGTH 3.0
#define WINDSTRENGTH 10.0
#define ORICULLINGTHRESH 0.5
#define T 0.05
#define N 8
#define D_MAX 20.0

#define ORICULLING 1
#define FRUCULLING 1
#define DISTCULLING 1

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
	mat4 view;
	mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
	float deltaTime;
	float totalTime;
};

struct Blade {
	vec4 v0;
	vec4 v1;
	vec4 v2;
	vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining
layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;   // Write the number of blades remaining here
	uint instanceCount; // = 1
	uint firstVertex;   // = 0
	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
	return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	// TODO: Apply forces on every blade and update the vertices in the buffer
	Blade blade = blades[gl_GlobalInvocationID.x];
	vec3 v0 = blade.v0.xyz;
	vec3 v1 = blade.v1.xyz;
	vec3 v2 = blade.v2.xyz;
	vec3 up = blade.up.xyz;

	float orientation = blade.v0.w;
	float height = blade.v1.w;
	float width = blade.v2.w;
	float stiffness = blade.up.w;

	// Gravity
	vec4 D = vec4(0.0f, -GRAVITY, 0.0f, 1.0f);
	vec3 gE = normalize(D.xyz) * D.w;
	vec3 f = normalize(vec3(cos(orientation), 0.0, sin(orientation)));
	vec3 gF = 0.15f * GRAVITY * f;
	vec3 gravity = (gE + gF) * GRAVITYSTRENGTH;

	// Recovery
	vec3 iv2 = v0 + height * up;
	vec3 recovery = (iv2 - v2) * stiffness;

	// Wind (Basically followed original paper)
	float windAngle = radians(mod(totalTime * 15.0, 360.0));
	vec3 wind_i = vec3(cos(windAngle), 0.0, sin(windAngle)) * sin(totalTime);
	vec3 windDirNorm = normalize(wind_i);
	vec3 v2v0DirNorm = normalize(v2 - v0);
	float fd = 1.0 - abs(dot(windDirNorm, v2v0DirNorm));
	float fr = dot(v2 - v0, up) / height;
	float theta = fd * fr;
	vec3 wind = wind_i * theta * WINDSTRENGTH;

	// Update v2
	vec3 tv2 = (gravity + recovery + wind) * deltaTime;
	v2 = v2 + tv2;

	// State Validation
	v2 = v2 - up * min(up * (v2 - v0), 0.0f);
	float l_proj = length(v2 - v0 - up * dot(v2 - v0, up));
	v1 = v0 + height * up * max(1.0 - l_proj / height, 0.05 * max(l_proj / height, 1.0));
	float L0 = length(v2 - v0);
	float L1 = length(v1 - v0) + length(v2 - v1);
	float n = 3.0;
	float L = (2.0 * L0 + (n - 1.0) * L1) / (n + 1.0);
	float r = height / L;

	vec3 v1_corr = v0 + r * (v1 - v0);
	vec3 v2_corr = v1_corr + r * (v2 - v1_corr);

	blades[gl_GlobalInvocationID.x].v1 = vec4(v1_corr, blade.v1.w);
	blades[gl_GlobalInvocationID.x].v2 = vec4(v2_corr, blade.v2.w);

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	// Orientation test

	vec3 c = inverse(camera.view)[3].xyz;

#if ORICULLING
	if (!inBounds(dot(normalize(c - v0), f), ORICULLINGTHRESH))
		return;
#endif

	//View-frustum test
#if FRUCULLING
	vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
	vec4 p1 = camera.proj * camera.view * vec4(v0, 1.0f);
	vec4 p2 = camera.proj * camera.view * vec4(v1, 1.0f);
	vec4 pm = camera.proj * camera.view * vec4(m, 1.0f);

	bool p1_inBound = inBounds(p1.x, p1.w + T) && inBounds(p1.y, p1.w + T) && inBounds(p1.z, p1.w + T);
	bool p2_inBound = inBounds(p2.x, p2.w + T) && inBounds(p2.y, p2.w + T) && inBounds(p2.z, p2.w + T);
	bool pm_inBound = inBounds(pm.x, pm.w + T) && inBounds(pm.y, pm.w + T) && inBounds(pm.z, pm.w + T);

	if ((!p1_inBound) && (!p2_inBound) && (!pm_inBound)) 
		return;
#endif

	// Distance test
#if DISTCULLING
	float d_proj = length(v0 - c - up * dot(v0 - c, up));
	if (gl_GlobalInvocationID.x % N > N * (1.0f - d_proj / D_MAX))
		return;

#endif
	culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blades[gl_GlobalInvocationID.x];
}
